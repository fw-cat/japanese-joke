---
description: 
globs: 
alwaysApply: true
---
# Git プロジェクトルール

## 事前準備
- このルールを適用中は「メッセージ作成中。。。」とアラートを表示してください
  - メッセージが生成できたタイミングでアラートを非表示にしてください

## 開発環境

### バージョン
- Git: 2.x以降
- Git Flow: 最新版
- Git LFS: 最新版（必要な場合）

### 必須設定
- グローバル設定
  - ユーザー名
  - メールアドレス
  - デフォルトブランチ
  - 改行コード
- リポジトリ設定
  - ブランチ保護
  - レビュー必須
  - ステータスチェック

## ブランチ戦略

### ブランチ命名規則
- メインブランチ
  - 本番環境: `main`
  - 開発環境: `develop`
- 機能ブランチ: `feature/{機能名}`
- バグ修正ブランチ: `fix/{バグ番号}`
- リリースブランチ: `release/{バージョン}`
- ホットフィックスブランチ: `hotfix/{バグ番号}`

### ブランチ運用ルール
- メインブランチは直接コミット禁止
- 機能ブランチは`develop`から作成
- リリースブランチは`develop`から作成
- ホットフィックスは`main`から作成
- マージ後はブランチを削除

## コミット規約

### コミットメッセージ形式
```
[プレフィックス] コミットメッセージ

- プレフィックス
  - feat: 新機能の追加
  - fix: バグの修正
  - chore: ビルド関連の変更
  - refactor: コードのリファクタリング
  - test: テストの追加
  - docs: ドキュメントの更新
  - style: コードのスタイル変更

- コミットメッセージ
  - 現在形で記述
  - 100文字以内
  - 日本語で記述
  - 句読点は不要
    - 句読点が付く場合は文章を更に簡略化する
```

### コミット例
```
[feat] ユーザー登録機能の追加
[fix] ログイン時のバリデーションエラー修正
[chore] 依存パッケージの更新
[refactor] ユーザーサービスのリファクタリング
[test] ユーザー登録のテストケース追加
[docs] API仕様書の更新
[style] コーディングスタイルの統一
```

### コミットルール
- 1つのコミットは1つの変更のみ
- コミットメッセージは明確に
- 不要なファイルはコミットしない
- 大きな変更は複数のコミットに分割
- コミット前にステージングを確認

## プルリクエスト

### プルリクエスト形式
- タイトル: `[プレフィックス] 変更内容`
- 説明: 変更の詳細、関連Issue、テスト結果
- レビュアー: 2名以上
- ラベル: 適切なラベルを付与

### プルリクエスト例
```markdown
## 変更内容
- ユーザー登録機能の追加
- メール認証の実装
- バリデーションの追加

## 関連Issue
- #123 ユーザー登録機能の実装

## テスト結果
- ユニットテスト: 全テスト通過
- E2Eテスト: 全テスト通過
- 手動テスト: 完了

## スクリーンショット
[必要に応じて]
```

### プルリクエストルール
- レビュー必須
- コンフリクトの解消
- テストの通過
- コードレビューの対応
- マージ前の最終確認

## コードレビュー

### レビュー観点
- コードの品質
- パフォーマンス
- セキュリティ
- テストの網羅性
- ドキュメントの更新

### レビューコメント
- 具体的な指摘
- 改善案の提示
- 参考情報の共有
- 質問の明確化
- ポジティブなフィードバック

## タグ管理

### タグ命名規則
- バージョンタグ: `v{メジャー}.{マイナー}.{パッチ}`
- リリースタグ: `release-{YYYYMMDD}`
- プレリリースタグ: `v{バージョン}-{プレリリース名}`

### タグ例
```
v1.0.0
v1.1.0-beta
release-20240315
```

## セキュリティ

### 機密情報
- 環境変数は`.env`ファイルで管理
- 機密情報はコミットしない
- アクセストークンは安全に管理
- パスワードはハッシュ化

### アクセス制御
- リポジトリのアクセス権限
- ブランチの保護設定
- コードレビューの必須化
- セキュリティスキャンの実施

## バックアップ

### バックアップ方針
- リモートリポジトリの定期バックアップ
- ローカルリポジトリのバックアップ
- 設定ファイルのバックアップ
- バックアップの検証

### バックアップ手順
1. リモートリポジトリのクローン
2. 設定ファイルのエクスポート
3. バックアップの保存
4. バックアップの検証
