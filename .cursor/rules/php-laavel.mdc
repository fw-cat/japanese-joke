---
description: 
globs: *.php
alwaysApply: false
---
# PHP/Laravel プロジェクトルール

## 開発環境

### バージョン
- PHP: 8.x
- Laravel: 10.x以降
- Composer: 2.x

### 必須拡張機能
- BCMath
- Ctype
- Fileinfo
- JSON
- Mbstring
- OpenSSL
- PDO
- Tokenizer
- XML

## コーディング規約

### 基本ルール
- PSR-12に準拠
- インデントは4スペース
- 行の最大長は120文字
- メソッドの引数は1行に1つ
- 配列の最後の要素にもカンマを付ける
- 型宣言は必須
- 戻り値の型宣言は必須
- プロパティの型宣言は必須

### 命名規則

#### クラス・インターフェース・トレイト
- クラス名はPascalCase
- インターフェース名は`Interface`サフィックス
- トレイト名は`Trait`サフィックス
- 抽象クラス名は`Abstract`プレフィックス
- 例外クラス名は`Exception`サフィックス

#### メソッド・変数
- メソッド名はcamelCase
- 変数名はcamelCase
- 定数はUPPER_SNAKE_CASE
- プライベートメソッドは`_`プレフィックス
- ブール値を返すメソッドは`is`、`has`、`can`で始める

#### ファイル名
- クラスファイルは`{クラス名}.php`
- インターフェースファイルは`{インターフェース名}.php`
- トレイトファイルは`{トレイト名}.php`
- テストファイルは`{クラス名}Test.php`

## アプリケーション構造

### ディレクトリ構成
```
app/
├── Console/
│   └── Commands/
├── Http/
│   ├── Controllers/
│   ├── Middleware/
│   └── Requests/
├── Models/
├── Services/
├── Mail/
├── Notifications/
├── Policies/
└── Providers/
```

### 各ディレクトリの役割

#### Controllers
- シングルアクションコントローラーを推奨
- ビジネスロジックはサービスに移動
- バリデーションはFormRequestを使用
- レスポンスはResourceを使用

#### Models
- スコープは`scope`プレフィックス
- アクセサは`get{Attribute}Attribute`
- ミューテータは`set{Attribute}Attribute`
- リレーションは明確な命名
- カスタムクエリビルダは`{モデル名}QueryBuilder`

#### Services
- インターフェースを実装
- 依存性注入を使用
- トランザクション処理を適切に実装
- ビジネスロジックの集約

## コーディング例

### コントローラー
```php
<?php

namespace App\Http\Controllers;

use App\Http\Requests\User\StoreRequest;
use App\Http\Resources\UserResource;
use App\Services\UserService;

class UserController extends Controller
{
    public function __construct(
        private readonly UserService $userService
    ) {
    }

    public function store(StoreRequest $request): UserResource
    {
        $user = $this->userService->create($request->validated());

        return new UserResource($user);
    }
}
```

### モデル
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;

class User extends Model
{
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    protected $hidden = [
        'password',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'is_active' => 'boolean',
    ];

    public function posts(): HasMany
    {
        return $this->hasMany(Post::class);
    }

    public function scopeActive($query)
    {
        return $query->where('is_active', true);
    }
}
```

### サービス
```php
<?php

namespace App\Services;

use App\Models\User;
use App\Repositories\UserRepositoryInterface;
use Illuminate\Support\Facades\DB;

class UserService implements UserServiceInterface
{
    public function __construct(
        private readonly UserRepositoryInterface $userRepository
    ) {
    }

    public function create(array $data): User
    {
        return DB::transaction(function () use ($data) {
            $user = $this->userRepository->create($data);
            
            // 追加の処理
            
            return $user;
        });
    }
}
```

## テスト

### テスト構造
```
tests/
├── Unit/
│   ├── Services/
│   └── Repositories/
├── Feature/
│   └── Http/
└── Browser/
```

### テスト命名規則
- テストクラス名は`{テスト対象コントローラクラス名}Test`
- テストメソッド名は`[プレフィックス、error/success]_{テスト内容を簡単に記載}`
- テスト記法はPestを利用して記載する

### テスト例
```php
<?php

use App\Models\User;
use Illuminate\Http\Response;

use function Pest\Laravel\{actingAs, getJson, postJson};

// 未ログインでアクセスした場合は401エラーが返る
it('[error]not login access.', function () {
    getJson('/users', [])
        ->assertStatus(Response::HTTP_UNAUTHORIZED);
});

// ユーザは存在するがパスワードが間違っている場合は401エラーが返る
it('[error]password error.', function () {
    $user = User::factory()->create();
    $response = postJson('/users/login', [
        'email' => $user->email,
        'password' => 'wrong_password',
    ]);
    $response->assertStatus(Response::HTTP_NOT_FOUND);
});

// ユーザは存在しない場合は401エラーが返る
it('[error]user not found.', function () {
    $response = postJson('/users/login', [
        'email' => 'nonexistent@example.com',
        'password' => 'password',
    ]);
    $response->assertStatus(Response::HTTP_NOT_FOUND);
}); 

// パスワードパラメータがない場合は401エラーが返る
it('[error]password parameter is required.', function () {
    $response = postJson('/users/login', [
        'email' => 'test@example.com',
    ]);
    $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
});

// ログインしている場合は200が返る
it('[success]login success.', function () {
    $user = User::factory()->create();
    $response = postJson('/users/login', [
        'email' => $user->email,
        'password' => 'password',
    ]);
    $response->assertStatus(Response::HTTP_OK);
});
```

## セキュリティ

### 入力値の検証
- FormRequestを使用
- バリデーションルールは明確に定義
- カスタムバリデーションルールは必要に応じて作成

### 認証・認可
- ミドルウェアで適切に制御
- ポリシーを使用した認可
- ゲートを使用した認可

### データ保護
- 機密情報は適切に暗号化
- パスワードはハッシュ化
- セッション管理の適切な実装

## パッケージ管理

### 必須パッケージ
- Laravel Sanctum
- Laravel Telescope
- Laravel Dusk
- Laravel Pint
- Laravel IDE Helper

### 開発パッケージ
- PHPUnit
- Laravel Mix
- Laravel Debugbar
- Laravel Tinker
- PestPHP

## デプロイメント

### 環境変数
- `.env.example`をテンプレートとして使用
- 本番環境の環境変数は安全に管理
- 機密情報は暗号化して管理

### デプロイメント手順
1. コードのプル
2. 依存関係のインストール
3. 環境変数の設定
4. マイグレーションの実行
5. キャッシュのクリア
6. アセットのコンパイル

## メンテナンス

### ログ管理
- ログローテーションの設定
- エラーログの監視
- アクセスログの分析

### バックアップ
- データベースの定期的なバックアップ
- ファイルのバックアップ
- バックアップの検証

### パフォーマンス
- クエリの最適化
- キャッシュの活用
- インデックスの適切な設定
